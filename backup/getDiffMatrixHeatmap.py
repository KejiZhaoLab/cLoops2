#!/usr/bin/env python
#--coding:utf-8 --
"""
"""
__date__ = "2019-09-17"
__modified__ = ""
__email__ = "caoyaqiang0410@gmail.com"

#general library
import os, argparse, sys
from glob import glob
from collections import Counter
from datetime import datetime
from argparse import RawTextHelpFormatter

#3rd library
import numpy as np
import pandas as pd
from tqdm import tqdm
from scipy import sparse
from joblib import Parallel, delayed
from matplotlib.ticker import AutoLocator

#cLoops2
from cLoops2.io import parseIxy
from cLoops2.cmat import getObsMat, getExpMat
from cLoops2.settings import *


def help():
    """
    Create the command line interface.
    """
    description = """
        Plot the matrix heatmaps for the 3D genome data for two sets.
        Example:
        getDiffMatrixHeatmap.py -fa Trac1/chr21-chr21.ixy -fb Trac2/chr21-chr21.ixy -o Trac1vs2 -cut 1000 -bs 2000 -log
        """
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=RawTextHelpFormatter)
    parser.add_argument(
        "-fa",
        dest="faixy",
        required=True,
        type=str,
        help="Input .ixy file generated by cLoops2 for first file.")
    parser.add_argument(
        "-fb",
        dest="fbixy",
        required=True,
        type=str,
        help="Input .ixy file generated by cLoops2 for second file.")
    parser.add_argument("-o",
                        dest="output",
                        required=True,
                        type=str,
                        help="Output prefix.")
    parser.add_argument(
        "-bs",
        dest="binSize",
        required=False,
        default=5000,
        type=int,
        help=
        "Bin size/matrix resolution (bp) to generate the contact matrix for estimation, default is 5000 bp."
    )
    parser.add_argument(
        "-start",
        dest="start",
        required=False,
        type=int,
        default=0,
        help="Start genomic coordinate for the target region,default is 0.")
    parser.add_argument(
        "-end",
        dest="end",
        required=False,
        type=int,
        default=-1,
        help=
        "End genomic coordinate for the target region,default will be inferred from the data."
    )
    parser.add_argument("-log",
                        dest="log",
                        required=False,
                        action="store_true",
                        default=False,
                        help="Whether to log transform the matrix.")
    parser.add_argument(
        "-cut",
        dest="cut",
        type=int,
        default=0,
        help="Distance cutoff for PETs to filter, default is 0.")
    op = parser.parse_args()
    return op


def plotOneHeatmap(mat, ax, title, ano="log2(Obs/Exp)"):
    cmap = sns.cubehelix_palette(light=1, as_cmap=True)
    sns.set(font_scale=0.5)
    ax = sns.heatmap(mat,
                     xticklabels=False,
                     yticklabels=False,
                     square=True,
                     cmap=cmap,
                     vmin=0,
                     ax=ax,
                     cbar_kws={
                         'label': ano,
                         'orientation': 'horizontal'
                     })
    #draw the box
    ax.axvline(x=ax.get_xlim()[0], color="k", linewidth=2)
    ax.axvline(x=ax.get_xlim()[1], color="k", linewidth=2)
    ax.axhline(y=ax.get_ylim()[0], color="k", linewidth=2)
    ax.axhline(y=ax.get_ylim()[1], color="k", linewidth=2)
    ax.set_title(title, fontsize=12)
    return ax


def plotDiffMatHeatmap(
        fa,
        fb,
        fo,
        start=0,
        end=-1,
        r=5000,
        cut=0,
        log=False,
):
    """
    Plot the contact matrix heatmaps for compare.
    """
    chroma, xya = parseIxy(fa, cut=cut)
    chromb, xyb = parseIxy(fb, cut=cut)
    if chroma != chromb:
        print("ERROR! %s and %s are not the same target chromosome, return." %
              (fa, fb))
        return
    xya = xya[:, 1:]
    xyb = xyb[:, 1:]
    if start == 0:
        start = min(np.min(xya), np.min(xyb))
    if end == -1:
        end = max(np.max(xya), np.max(xyb))
    mata = getObsMat(xya, start, end, r)
    matb = getObsMat(xyb, start, end, r)
    bgmata = getExpMat(xya, mata.shape, start, end, r)
    bgmatb = getExpMat(xyb, matb.shape, start, end, r)
    fig, axs = pylab.subplots(1, 3, figsize=(13, 6))
    axs[0] = plotOneHeatmap(
        np.log10(mata + 1.0) - np.log10(bgmata + 1.0), axs[0],
        fa.split("/")[-2])
    axs[1] = plotOneHeatmap(
        np.log10(matb + 1.0) - np.log10(bgmatb + 1.0), axs[1],
        fb.split("/")[-2])
    axs[2] = plotOneHeatmap(np.log10(mata + 1.0) - np.log10(matb + 1.0),
                            axs[2],
                            fa.split("/")[-2] + "/" + fb.split("/")[-2],
                            ano="log10(A/B)")
    ax = axs[2]
    ax.set_xlabel(chroma[0])
    ax.set_ylabel(chromb[1])
    #draw the region
    s = int(ax.get_ylim()[1])
    e = int(ax.get_ylim()[0])
    """
    step = (e - s) / 5
    ss = int(step)
    for y in range(s, e, ss):
        ax.text(ax.get_xlim()[1] * 1.01,
                y,
                int(start + y * (end - start) / 5),
                fontsize=4,
                color="k")
    """
    ax.text(ax.get_xlim()[1] * 1.01, s, start, fontsize=4, color="k")
    ax.text(ax.get_xlim()[1] * 1.01, e, end, fontsize=4, color="k")
    pylab.savefig(fo + "_compareMatrix.pdf")


def main():
    op = help()
    plotDiffMatHeatmap(
        op.faixy,
        op.fbixy,
        op.output,
        start=op.start,
        end=op.end,
        r=op.binSize,
        cut=op.cut,
        log=op.log,
    )


if __name__ == "__main__":
    main()
