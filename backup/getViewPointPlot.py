#!/usr/bin/env python
#--coding:utf-8 --
"""
getViewPointPlot.py
Get the view point plot for the target region.
"""
__date__ = "2019-09-11"
__modified__ = ""
__email__ = "caoyaqiang0410@gmail.com"

#general library
import os
import argparse
from glob import glob
from collections import Counter
from datetime import datetime
from argparse import RawTextHelpFormatter

#3rd library
import pylab
import numpy as np
import pandas as pd
from tqdm import tqdm

#cLoops2
from cLoops2.ds import XY
from cLoops2.io import parseIxy
from cLoops2.settings import *


def help():
    """
    Create the command line interface for the script of getViewPointPlot.py.
    """
    description = """
        Get the view point plot for a specific regions. 
        Example:
        getViewPointPlot.py -f GM12878_Trac/chr21-chr21.ixy -o GM12878_Trac_chr21
        """
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=RawTextHelpFormatter)
    parser.add_argument(
        "-f",
        dest="fixy",
        required=True,
        type=str,
        help=
        "Input .ixy file generated by cLoops2 to caculate insulation score.")
    parser.add_argument("-o",
                        dest="output",
                        required=True,
                        type=str,
                        help="Output prefix.")
    parser.add_argument("-start",
                        dest="start",
                        required=True,
                        type=int,
                        help="Start genomic coordinate for the target region.")
    parser.add_argument("-end",
                        dest="end",
                        required=True,
                        type=int,
                        help="End genomic coordinate for the target region.")
    parser.add_argument(
        "-ext",
        dest="ext",
        required=False,
        default=10,
        type=int,
        help=
        "The extension fold of the target region to show the interactions around. Default is 10."
    )
    op = parser.parse_args()
    return op


def getViewPointPlot(f, fout, start, end, ext=10):
    print("loading %s" % f)
    key, mat = parseIxy(f, cut=0)
    xy = XY(mat[:, 0], mat[:, 1])
    if key[0] != key[1]:
        print(
            "IS can be only caculated for intra-chromosomal interactions. Return."
        )
        return
    ds = {}
    t = len(xy.queryPeak(start, end)) / 2
    #t = len(xy.queryPeakBoth(start,end))
    for i in tqdm(range(int(-ext / 2), int(ext / 2 + 1))):
        s = start - i * (end - start)
        e = end - i * (end - start)
        if i == 0:
            rab = xy.queryPeakBoth(s, e)
            s = len(rab) / t
            #s = 1.0
        else:
            ra, rb, rab = xy.queryLoop(s, e, start, end)
            s = len(rab) / t
            #s = len(rab) / xy.number * 10**6
        ds[i] = s
    ds = pd.Series(ds)
    ds.to_csv("%s_viewPoint.txt" % fout)
    fig, ax = pylab.subplots()
    ax.plot(ds.index, ds.values, color=colors[0], linewidth=2)
    ax.set_title("%s:%s-%s,ext=%s" % (key[0], start, end, ext))
    ax.set_xlabel("Bins from the view point region")
    ax.set_ylabel("Normalized interactions")
    pylab.savefig("%s_viewPoint.pdf" % fout)


def main():
    op = help()
    getViewPointPlot(op.fixy, op.output, op.start, op.end, ext=op.ext)


if __name__ == "__main__":
    main()
